package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"example/graph/model"
	"example/services"
)

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, user model.CreateUserDto) (*model.UserDto, error) {
	err := services.Validator().User().PasswordAndConfirmEqual(user).Get()

	if err != nil {
		return nil, err
	}

	dao := services.Converter().User().CreateDtoToDao(user)

	err = services.DBActions().EncryptPassword(dao)

	if err != nil {
		return nil, err
	}

	err = services.DB().User().Create(dao)

	if err != nil {
		return nil, err
	}

	dto := services.Converter().User().DaoToDto(dao)

	return &dto, err
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*model.UserDto, error) {

	res, err := services.DB().User().FindByUsername(username)

	if err != nil {
		return nil, err
	}

	err = services.Validator().User().PasswordAndHashedEqual([]byte(password), []byte(res.Password)).Get()

	if err != nil {
		return nil, err
	}

	dto := services.Converter().User().DaoToDto(res)

	return &dto, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.UserDto, error) {
	return &model.UserDto{ID: "1", Username: "Test", Age: 24}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
